snippet sd
	Spoon::dump(${1});
snippet sdd
	Spoon::dump('TEST');${1}
snippet ffi
	class Frontend${1:BaseClassName}Index extends FrontendBaseBlock
	{
		/**
		 * @var array Assoc. array used to filter the items that must be fetched.
		 */
		protected $filter;

		/**
		 * @var array The list of items fetched by this action.
		 */
		protected $items;

		/**
		 * @var array Assoc. array with the pager's parameters.
		 */
		protected $pagination = array();

		public function execute()
		{
			parent::execute();
			$this->loadFilter();
			$this->loadData();
			$this->loadTemplate();
		}

		private function loadData()
		{
			$requestedPage = $this->URL->getParameter('page', 'int', 1);
			$limit = FrontendModel::getModuleSetting($this->getModule(), 'overview_num_items', 10);
			$offset = ($requestedPage * $limit) - $limit;
			list($this->items, $totalRowCount) = Frontend$1Model::find(
				$this->filter, $limit, $offset
			);
			$this->configurePager($requestedPage, $limit, $totalRowCount, $offset);
		}

		/**
		 * Configure the pagination component for this request.
		 *
		 * @param int $requestedPage The requested page (starts from 1)
		 * @param int $limit The number of rows displayed in a page.
		 * @param int $totalRowCount The total number of rows counted.
		 * @param int $offset The offset in all the rows we have started to fetch from.
		 */
		private function configurePager($requestedPage, $limit, $totalRowCount, $offset)
		{
			$this->pagination['url'] = FrontendNavigation::getURLForBlock($this->getModule())
				. ($this->filter ? '?' . http_build_query($this->filter) : '');
			$this->pagination['limit'] = $limit;
			$this->pagination['num_items'] = $totalRowCount;
			$this->pagination['num_pages'] = (int) ceil($totalRowCount / $limit);
			if($this->pagination['num_pages'] == 0)
			{
				$this->pagination['num_pages'] = 1;
			}
			if($requestedPage > $this->pagination['num_pages'] || $requestedPage < 1)
			{
				$this->redirect(FrontendNavigation::getURL(404));
			}
			$this->pagination['requested_page'] = $requestedPage;
			$this->pagination['offset']  = $offset;
		}

		/**
		 * Load the filter to be used when retrieving items.
		 */
		private function loadFilter()
		{
			$this->filter = array(${2});
		}

		protected function loadTemplate($path = null, $overwrite = false)
		{
			parent::loadTemplate($path, $overwrite);
			$this->tpl->assign('items', $this->items);
			$this->parsePagination();
		}
	}
snippet fbi
	/**
	 * The backend index action for the $1 module.
	 *
	 * @author <per@netlash.com>
	 */
	class Backend${1:BaseClassName}Index extends BackendBaseActionIndex
	{
		public function execute()
		{
			parent::execute();
			$this->loadDataGrids();
			$this->parse();
			$this->display();
		}

		private function loadDataGrids()
		{
			$this->dg = new BackendDataGridArray(Backend$1Model::${2:all}());
		}

		/**
		 * Assign the template variables.
		 */
		protected function parse()
		{
			$this->tpl->assign(
				'dg',
				$this->dg->getNumResults() != 0 ? $this->dg->getContent() : false
			);
		}
	}
snippet ffc
	/**
	 * Frontend configuration for the $1 module.
	 *
	 * @author <per@netlash.com>
	 */
	class Frontend${1:Module}Config extends FrontendBaseConfig
	{
		/**
		 * @var string
		 */
		protected $defaultAction = '${2:index}';

		/**
		 * @var array
		 */
		protected $disabledActions = array(${3});
	}
snippet fbc
	/**
	 * Backend configuration for the $1 module.
	 *
	 * @author <per@netlash.com>
	 */
	class Backend${1:Module}Config extends BackendBaseConfig
	{
		/**
		 * @var string
		 */
		protected $defaultAction = '${2:index}';

		/**
		 * @var array
		 */
		protected $disabledActions = array(${3});
	}
snippet fba
	/**
	 * Backend Add action for the $1 module.
	 * It will display a form, validate it when posted and update the model when
	 * the form is valid.
	 *
	 * @author <per@netlash.com>
	 */
	class Backend${1:Module}Add extends BackendBaseActionAdd
	{
		public function execute()
		{
			parent::execute();
			$this->loadForm();
			$this->validateForm();
			$this->parse();
			$this->display();
		}

		private function loadForm()
		{
			$this->frm = new BackendForm('add');
		}

		private function validateForm()
		{
			if(!$this->frm->isSubmitted()) return;

			// validation here

			if(!$this->frm->isCorrect()) return;
			$id = Backend$1Model::add($this->getItemFromForm());
		}

		/**
		 * Extract the necessary values from the submitted form and return it as a record
		 * that is suitable for updating the model.
		 *
		 * @return array
		 */
		private function getItemFromForm()
		{
			// Get the necessary values from the form here.
		}
	}


